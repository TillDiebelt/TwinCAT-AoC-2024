<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <Itf Name="ILineList" Id="{b4046db7-0a10-4449-9cd3-cb4a773bb2b5}">
    <Declaration><![CDATA[INTERFACE ILineList EXTENDS CNM_AbstractObject.IObject
]]></Declaration>
    <Method Name="append" Id="{88590041-602b-4aa0-b902-9d9d9e228a47}">
      <Declaration><![CDATA[(*

short summary
=================
This methode adds the given CNM_AbstractObject.IObject to the end of the list.
Example: 
Given a list that looks like this: (Head->) A B C (<- End),
calling append(D) on this list will place the D at the and,
making it the new End: (Head->) A B C D(<- End)

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================

*)
METHOD append : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionResult
VAR_INPUT
	(*The object to be appended*)
	line	: ILine;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="appendCollection" Id="{caebd496-c074-44ab-be88-a2656db0d146}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode adds all elements of the given collection to the end of this list.
Example:
For the list1: A B C and list2: D E F will be after list1.appendCollection(list2):
A B C D E F. Notice the elements are still in the same order they where befor on each subsection.

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================

*)
METHOD appendCollection : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionResult
VAR_INPUT
	(*The collection to be appended*)
	collectionToAppend	: CNM_CollectionInterfaces.ICollection;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="clear" Id="{5fae981f-249f-4c33-a87e-66e8438d65c0}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode clears/deletes all clearable data from this object.
Example:
A list: 1 2 3 after list.clear() will have no remaining items, isEmpty = true.

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================

*)
METHOD clear
]]></Declaration>
    </Method>
    <Method Name="containsEqualLine" Id="{e1294481-1b46-47ab-af64-7d902f0d8e79}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode checks if a given object is contained in the collection. 
The object is inside if the collection contains an object where the default comperator of the objects returns EQUAL on compareTo!

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================
:return: ``FALSE``: list does not contain an equal object
    ``TRUE``: list does contain an equal object

*)
METHOD containsEqualLine : BOOL
VAR_INPUT
	(*the object to be checked if it exists inside the collection*)
	line	: ILine;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="containsLine" Id="{5a68add5-0fe2-4623-bfdb-c0d2bd786654}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode checks if a given object is contained in the collection. 
The object is inside if the collection contains an object of equal hashcode!

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================
:return: ``FALSE``: list does not contain given object,
    ``TRUE``: list does contain given object

*)
METHOD containsLine : BOOL
VAR_INPUT
	(*the object to be checked if it exists inside the collection*)
	line	: ILine;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="dequeue" Id="{5c23305f-231a-4d07-8447-6c7ae893fd88}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This property returns the last object in the first and removes it from the list. Can be seen as opposite of prepend.
Example:
On a list: (Head -->) A B C, list.dequeue will return A.
Example 2:
If you call prepend(x), a dequeue right after will return x.

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

*)
METHOD dequeue : ILine
]]></Declaration>
    </Method>
    <Method Name="forEach" Id="{2589ec0e-6a6c-4b07-b88f-425abb6e002b}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
Method to perform a given action on all objects inside the collection.
Needs to reset the execution flag between calls.
Action to perform needs to implement :ref:`IApplier`.
Example:
You have a list of numbers: 1 2 3 and a ConcreteIncrementApplier that can take  a number and increment it. 
Calling list.forEach(TRUE, ConcreteIncrementApplier) will increment all numbers in the list, becoming: 2 3 4.

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=========================
:return: CNM_ReturnTypes.ExecutionState

*)
METHOD forEach : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionState
VAR_INPUT
	(*control bit to start or abort the forEach loop*)
	execute	: BOOL;
	(*the applier (action) to be used on all obejcts in the collection*)
	applier	: CNM_CollectionInterfaces.IApplier;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="getIndexOf" Id="{f6d195a0-3e89-4ae8-bf1d-2e917e4fbdec}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode returns ths index of the first object that is equal to the given.
Example:
A list of: 1 2 3 after list.getIndexOf(1) will return: index=>0 and return IndexBounds.IN_BOUNDS
Example 2:
A list of: 1 2 3 after list.getIndexOf(4) will return: index=>3 and return IndexBounds.OUT_OF_BOUNDS

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================
:return: ``SingleExecutionResult.SUCCESS``: object found
    ``SingleExecutionResult.ERROR``: object couldn't be found in the list, index is undefined

*)
METHOD getIndexOf : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionResult
VAR_INPUT
	(*the object to get the index from*)
	line	: ILine;
END_VAR
VAR_OUTPUT
	(*the index of the object inside the collection*)
	index	: __XWORD;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="getLineAt" Id="{284662c4-9d37-4f7c-9ad9-d093f73d9b71}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode returns the object at the given index.
Returned objects can be modified, but not replaced! To replace an object use replaceObjectAt.
Example:
A list of: 1 2 3 after list.getObjectAt(1) will return: object=>2 and return SingleExecutionResult.SUCCESS
Example 2:
A list of: 1 2 3 after list.getObjectAt(3) will return: object=>NULL and return SingleExecutionResult.ERROR

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================
:return: ``SingleExecutionResult.SUCCESS``: index was valid
    ``SingleExecutionResult.ERROR``: index was not valid, returned object is undefined

*)
METHOD getLineAt : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionResult
VAR_INPUT
	(*the index to access the object from*)
	index	: __XWORD;
END_VAR
VAR_OUTPUT
	(*the object at the given index*)
	line	: ILine;
END_VAR
]]></Declaration>
    </Method>
    <Property Name="hasElement" Id="{a1cefeaa-b35a-41dc-80da-3ff6d86f5620}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
(*

short summary
=================
This property returns ``TRUE`` if the collection has any element.

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

*)
PROPERTY hasElement : BOOL
]]></Declaration>
      <Get Name="Get" Id="{4329805c-a91c-4f56-857c-7a0dff4fa573}">
        <Declaration><![CDATA[]]></Declaration>
      </Get>
    </Property>
    <Method Name="insertLineAt" Id="{76069a93-2223-439a-80b2-a578d9da5110}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode adds the given object at the given index. 
Will shift the other data starting at given index to the right.
List Lenght will be incremented.
Example:
A list of: 1 2 3 after list.insertObjectAt(1, object:=4) will become: 1 4 2 3 and return SingleExecutionResult.SUCCESS
Example 2:
A list of: 1 2 3 after list.insertObjectAt(3, object:=4) will become: 1 2 3 4 and return SingleExecutionResult.SUCCESS
Example 3:
A list of: 1 2 3 after list.insertObjectAt(5, object:=4) will become: 1 2 3 and return SingleExecutionResult.ERROR

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================
:return: ``SingleExecutionResult.SUCCESS``: index was valid, object inserted
    ``SingleExecutionResult.ERROR``: index out of bounds, list not changed

*)
METHOD insertLineAt : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionResult
VAR_INPUT
	(*the index to insert the object at*)
	index	: __XWORD;
	(*the object to be added*)
	line	: ILine;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="inverseSort" Id="{aa7b885d-06dc-4571-9bdb-458aaa9efb7b}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This method sorts the Sortable in the inverted order, so from great to low
.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=========================
:return: ``ABORTED``: While inverse was pending,execute had a falling edge,
	``BUSY``: Inverse is in progress
	``ERROR``: Inverse was not able to finish (p.e. List changed) call inverse(false) to reset
	``IDLE``: Currently invert is not in progress
	``SUCCESS``: Inversing was finished 
*)
METHOD inverseSort : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionState
VAR_INPUT
	(*control bit to start or abort the inverting, needs to be active until the ExecutionState is noz longer busy*)
	execute	: BOOL;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="invert" Id="{c03f2950-e7fa-414b-8296-0511ff1eb9cd}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
Inverts the order of the elements inside the object. Does not apply any kind of sorting, only reverses.

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=========================

*)
METHOD invert
]]></Declaration>
    </Method>
    <Property Name="isEmpty" Id="{7bc4b36d-f897-4044-a1e5-507f195d8ca1}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
(*

short summary
=================
This property returns ``TRUE`` if the collection is empty.

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

*)
PROPERTY isEmpty : BOOL
]]></Declaration>
      <Get Name="Get" Id="{eab55a78-9aea-4b31-84a1-a632646c08eb}">
        <Declaration><![CDATA[]]></Declaration>
      </Get>
    </Property>
    <Method Name="iterate" Id="{ff093593-7aab-4002-b4c7-4ffd417bdbf3}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode returns the next object in the iteration and returns an execution state.
Example:
You have a list: 1 2 3
the first iterate call will return CNM_ReturnTypes.BUSY and object = 1
the second iterate call will return CNM_ReturnTypes.BUSY and object = 2
the third iterate call will return CNM_ReturnTypes.SUCCESS and object = 3

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================

*)
METHOD iterate : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionState
VAR_INPUT
	(*control bit to start or abort the iterate*)
	execute	: BOOL;
END_VAR
VAR_OUTPUT
	(*the returned object of the iteration*)
	line	: ILine;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="pop" Id="{c2174e00-fe0a-4da1-954e-6803d9850409}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This property returns the last object in the list and removes it from the list. Can be seen as opposite of append.
Example:
On a list: (Head -->) A B C, list.pop will return C.
Example 2:
If you call append(x), a pop right after will return x.
May return a null pointer if list is empty

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

*)
METHOD pop : ILine
]]></Declaration>
    </Method>
    <Method Name="prepend" Id="{3ef46862-9269-4ce3-99ef-aad391b0bf49}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode adds the given obejct to the end of the list.
Example: 
Given a list that looks like this: (Head->) A B C (<- End),
calling prepend(D) on this list will place the D at start,
making it the new Head: (Head->) D A B C (<- End)

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================
:return: ``SingleExecutionResult.SUCCESS``: prepend was successful
	``SingleExecutionResult.ERROR``: allocation of memory for new object failed
	
*)
METHOD prepend : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionResult
VAR_INPUT
	(*The object to be prepended*)
	line	: ILine;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="prependCollection" Id="{d3d1e605-69a8-4b9a-86bd-cb9e1eb7bff2}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode adds all elements of the given collection to the start of this list. 
Example:
For the list1: A B C and list2: D E F will be after list1.prependCollection(list2):
D E F A B C. Notice the elements are still in the same order they where befor on each subsection.

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================
:return: ``SingleExecutionResult.SUCCESS``: prependCollection was successful
	``SingleExecutionResult.ERROR``: could not allocate memory for all new elements, list is left unchanged

*)
METHOD prependCollection : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionResult
VAR_INPUT
	(*The collection to be prepended*)
	collectionToPrepend	: CNM_CollectionInterfaces.ICollection;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="remove" Id="{ac176914-edc5-45af-9b49-6f3b26070aa9}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode removes the first instance of the given object from the list.
Compares objects with hash value.
For example a Linked List: A B C A A D will on remove(A) becomes: B C A A D

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================

*)
METHOD remove
VAR_INPUT
	(*The object to be removed from the list*)
	line	: ILine;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="removeLineAt" Id="{cedea2d5-82a1-4fc4-b183-c2b92b12dbcd}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode removes the element at the given index. 
Will shift the remaining data to the left (no empty space in list)
List Length will be decremented.
Example:
A list of: 1 2 3 after list.removeObjectAt(1) will become: 1 3 and return IndexBounds.IN_BOUNDS
Example 2:
A list of: 1 2 3 after list.removeObjectAt(3) will reamin: 1 2 3 and return IndexBounds.OUT_OF_BOUNDS

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================
:return: ``SingleExecutionResult.SUCCESS``: Element removed from index
    ``SingleExecutionResult.ERROR``: index out of bound, no object removed

*)
METHOD removeLineAt : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionResult
VAR_INPUT
	(*the index to remove the object from*)
	index	: __XWORD;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="replaceLineAt" Id="{be97742c-4e58-4b5d-a6f0-b1a7063c1f59}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode replaces the Interface reference inside the collection at the given index with the given Interface.
Example:
A list of: 1 2 3 after list.replaceObjectAt(1, withObject:=4) will become: 1 4 3 and return SingleExecutionResult.SUCCESS
Example 2:
A list of: 1 2 3 after list.replaceObjectAt(3, withObject:=4) will remain: 1 2 3 and return SingleExecutionResult.ERROR

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================
:return: ``SingleExecutionResult.SUCCESS``: index valid, element at index replaced with ``withObject``
    ``SingleExecutionResult.ERROR``: ìndex out of bounds, nothing changed

*)
METHOD replaceLineAt : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionResult
VAR_INPUT
	(*the index to replace the object at*)
	index	: __XWORD;
	(*the object to be at this index instead*)
	withLine	: ILine;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="setSorter" Id="{c9b89eeb-0fb0-4a2b-8ef5-0f2fe8547175}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This methode can replace the default sorter for a custom one. Check :ref:`IListSorter`
Can be used for performant sorting algorithms if more about the data structure is known.

.. attention:: 
	For implementations: **IListSorter is an empty interface and you should extend it with custom interfaces for each type of list.**
	For LinkedList see :ref:`ILinkedListSorter`. 
	Your implementation should then use this extended interface and the setter should check for compability. 
	
.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================
:return: ``THIS^`` :ref:`IList`

*)
METHOD setSorter : CNM_CollectionInterfaces.ISortable
VAR_INPUT
	(*The instance of the sorter to be used to sort the list*)
	sorter	: CNM_CollectionInterfaces.IArrayListSorter;
END_VAR
]]></Declaration>
    </Method>
    <Property Name="size" Id="{d9e1aacb-1421-48cd-a479-c642bea5dd3e}">
      <Declaration><![CDATA[{warning 'Add property implementation'}
(*

short summary
=================
This property returns the number of elements inside this collection.

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

*)
PROPERTY size : __XWORD
]]></Declaration>
      <Get Name="Get" Id="{33d6626d-6f42-42fb-bad1-b6a5d60ea208}">
        <Declaration><![CDATA[]]></Declaration>
      </Get>
    </Property>
    <Method Name="sort" Id="{b0abb6dd-3c3c-4622-8a10-db5934771501}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This method sorts the data structure. 
This can take many cycles and should be called until the CNM_ReturnTypes.ExecutionState is no longer ``BUSY``.

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================
:return: ``ABORTED``: While sort was pending,execute had a falling edge,
	``BUSY``: Sort is in progress
	``ERROR``: Sort was not able to finish (p.e. List changed) call sort(false) to reset
	``IDLE``: Currently no sort in progress
	``SUCCESS``: Sorting was finished 

*)
METHOD sort : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionState
VAR_INPUT
	(*control bit to start or abort the sorting, needs to be active until the ExecutionState is SUCCESS*)
	execute	: BOOL;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="sortWithComparator" Id="{8649770d-828d-4889-957d-720f0f92f9de}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(*

short summary
=================
This method sorts the data structure. 
It uses the passed Comperator to sort the structure.
This can take many cycles and should be called until the CNM_ReturnTypes.ExecutionState is no longer ``BUSY``.

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2022 ekvip automation GmbH <info@ekvip.de>
| SPDX-License-Identifier: Apache-2.0
| For details check: Apache-2.0_

.. _Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0

.. </legal notes>

parameters
=================
:return: ``ABORTED``: While sort was pending,execute had a falling edge,
	``BUSY``: Sort is in progress
	``ERROR``: Sort was not able to finish (p.e. List changed) call sort(false) to reset
	``IDLE``: Currently no sort in progress
	``SUCCESS``: Sorting was finished 

*)
METHOD sortWithComparator : CNM_CollectionInterfaces.CNM_ReturnTypes.SingleExecutionState
VAR_INPUT
	(*control bit to start or abort the sorting, needs to be active until the ExecutionState is SUCCESS*)
	execute	: BOOL;
	(*the comparator that should be used for the sort. Must not be changed while sort is in process*)
	comparator	: CNM_CollectionInterfaces.CNM_AbstractObject.IComparator;
END_VAR
]]></Declaration>
    </Method>
  </Itf>
</TcPlcObject>