<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Day07Solution" Id="{e0c55739-3d70-4fe6-a5dc-c5e561909620}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Day07Solution EXTENDS AbstractSolver
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="concatVals" Id="{cd20c3b0-d68f-4d01-9754-edf6c1abc083}">
      <Declaration><![CDATA[METHOD concatVals : ULINT
VAR_INPUT
	left :ULINT;
	right :ULINT;
END_VAR
VAR
	log10 :LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[log10 := LOG(right);

concatVals := left * TO_ULINT(EXPT(10, THIS^.roundUp(log10))) + right;

IF(concatVals < left * right)THEN
	concatVals := 0; //error
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="roundUp" Id="{2c7adf06-96b4-4a12-a338-d0d3bc4bcd55}">
      <Declaration><![CDATA[METHOD roundUp : ULINT
VAR_INPUT
	value :LREAL;
END_VAR
VAR
	up :ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[roundUp := TRUNC(value)+1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="solve" Id="{f0b3face-a5cb-42ba-ae7a-6f99433aefde}">
      <Declaration><![CDATA[METHOD solve
VAR_INPUT
	step	: DINT;
END_VAR
VAR_INST
	pathInserted :BOOL;
	sequences :CNM_Collections.ArrayList(100);
	parser :NumberParser();
	sum : ULINT;
	goal :ULINT;
END_VAR
VAR
	parsed :CNM_CollectionInterfaces.IArrayList;
	tmpObj :CNM_AbstractObject.IObject;
	tmpVal :CNM_AoC.IHaveUlintValue;
	sequence :CNM_CollectionInterfaces.IArrayList;
	sequenceCopy :CNM_CollectionInterfaces.IArrayList;
	index : DINT;
	currentLine :ILine;
	currentLineObject :IObject;
END_VAR
VAR CONSTANT
	READ_INPUT :DINT := 2;
	GET_LINES :DINT := READ_INPUT + 1;
	PARSE :DINT := GET_LINES + 1;
	SOLVE_PART1 :DINT := PARSE + 1;
	RESET_FOR_PART2 :DINT := SOLVE_PART1 + 1;
	SOLVE_PART2 :DINT := RESET_FOR_PART2 + 1;
	APPEND_SOLUTION :DINT := SOLVE_PART2 + 1;
	WRITE_SOLUTION :DINT := APPEND_SOLUTION + 1;
	CLEAN_UP :DINT := WRITE_SOLUTION + 1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE step OF
PARSE:	
	THIS^.lines.iterate(execute := FALSE);
	WHILE(THIS^.lines.iterate(execute := TRUE, line => currentLine) = CNM_ReturnTypes.SingleExecutionState.BUSY)DO
		parsed := parser.getAllNumbersUlint(currentLine);
		sequences.append(parsed);
	END_WHILE
	cm.proceed();	
SOLVE_PART1:
	cm.evaluate(sequences.iterate(cm.executeStep, object => tmpObj));
	IF(__QUERYINTERFACE(tmpObj, sequence))THEN
		sequence.getObjectAt(0, object => tmpObj);
		IF(__QUERYINTERFACE(tmpObj, tmpVal))THEN
			goal := tmpVal.value;
			sum := sum + SEL(THIS^.trySolve(0, 1, sequence, -1, goal), 0, goal);
		END_IF
	END_IF		
RESET_FOR_PART2:
	THIS^.bufferWrite := Concat(TO_STRING(sum), '$n');
	sum := 0;
	cm.proceed();
SOLVE_PART2:
	cm.evaluate(sequences.iterate(cm.executeStep, object => tmpObj));
	IF(__QUERYINTERFACE(tmpObj, sequence))THEN
		sequence.getObjectAt(0, object => tmpObj);
		IF(__QUERYINTERFACE(tmpObj, tmpVal))THEN
			goal := tmpVal.value;
			sum := sum + SEL(THIS^.trySolve(0, 1, sequence, -1, goal, TRUE), 0, goal);
		END_IF
	END_IF		
APPEND_SOLUTION:
	THIS^.bufferWrite :=Concat(THIS^.bufferWrite, Concat(TO_STRING(sum), '$n'));
	cm.proceed();
WRITE_SOLUTION:
	THIS^.writeSolution();
CLEAN_UP:
	cm.step.next := CNM_ReturnTypes.DefaultSteps.STEP.SUCCESS;
	lines.deepDestruct();
	sequences.deepDestruct();
	cm.proceed();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="trySolve" Id="{01c4ce95-3aa7-45dd-b6fb-953f5460d1af}">
      <Declaration><![CDATA[METHOD trySolve : BOOL
VAR_INPUT
	prevValue :ULINT := 0;
	index :DINT := 0;
	numbers :CNM_CollectionInterfaces.IArrayList;
	operator :DINT;
	goal :ULINT;
	part2 :BOOL := FALSE;
END_VAR
VAR
	obj :CNM_AbstractObject.IObject;
	val :CNM_AoC.IHaveUlintValue;
	curVal :ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(index >= numbers.size)THEN
	trySolve := goal = prevValue;
	RETURN;
END_IF

IF(prevValue > goal)THEN
	trySolve := FALSE;
	RETURN;
END_IF

numbers.getObjectAt(index, object => obj);
RETURN (NOT __QUERYINTERFACE(obj, val));
curVal := val.value;

IF(index = 1)THEN	
	trySolve := 
		THIS^.trySolve(curVal, index + 1, numbers, 0, goal, part2)
		OR THIS^.trySolve(curVal, index + 1, numbers, 1, goal, part2)
		OR part2 AND_THEN THIS^.trySolve(curVal, index + 1, numbers, 2, goal, part2);
	RETURN;
END_IF

CASE operator OF
0: //+
	trySolve := 
		THIS^.trySolve(prevValue+curVal, index + 1, numbers, 0, goal, part2)
		OR THIS^.trySolve(prevValue+curVal, index + 1, numbers, 1, goal, part2)
		OR part2 AND_THEN THIS^.trySolve(prevValue+curVal, index + 1, numbers, 2, goal, part2);
1: //*
	trySolve := 
		THIS^.trySolve(prevValue*curVal, index + 1, numbers, 0, goal, part2)
		OR THIS^.trySolve(prevValue*curVal, index + 1, numbers, 1, goal, part2)
		OR part2 AND_THEN THIS^.trySolve(prevValue*curVal, index + 1, numbers, 2, goal, part2);
2: // ||
	trySolve := 
		THIS^.trySolve(THIS^.concatVals(prevValue,curVal), index + 1, numbers, 0, goal, part2)
		OR THIS^.trySolve(THIS^.concatVals(prevValue,curVal), index + 1, numbers, 1, goal, part2)
		OR part2 AND_THEN THIS^.trySolve(THIS^.concatVals(prevValue,curVal), index + 1, numbers, 2, goal, part2);
END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>